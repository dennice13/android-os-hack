diff --git a/arch/arm/kernel/calls.S b/arch/arm/kernel/calls.S
index 463ff4a..5e95e86 100644
--- a/arch/arm/kernel/calls.S
+++ b/arch/arm/kernel/calls.S
@@ -387,6 +387,7 @@
 /* 375 */	CALL(sys_setns)
 		CALL(sys_process_vm_readv)
 		CALL(sys_process_vm_writev)
+		CALL(sys_sched_setlimit)
 #ifndef syscalls_counted
 .equ syscalls_padding, ((NR_syscalls + 3) & ~3) - NR_syscalls
 #define syscalls_counted
diff --git a/arch/arm/kernel/setlimit.c b/arch/arm/kernel/setlimit.c
new file mode 100644
index 0000000..59f1789
--- /dev/null
+++ b/arch/arm/kernel/setlimit.c
@@ -0,0 +1,10 @@
+#include <linux/syscalls.h>
+#include <linux/sched.h>
+
+asmlinkage int sys_sched_setlimit(pid_t pid, int limit) {
+	for(int i = 0; i < 10; i++) {
+		printk(KERN_INFO "sys_sched_setlimit: pid[%d] limit[%d]", (int) pid, limit);
+	}
+
+	return 0;
+}
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 3de3acb..7c228f9 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -857,5 +857,6 @@ asmlinkage long sys_process_vm_writev(pid_t pid,
 				      const struct iovec __user *rvec,
 				      unsigned long riovcnt,
 				      unsigned long flags);
+asmlinkage int sys_sched_setlimit(pid_t pid, int limit);
 
 #endif
diff --git a/kernel/sched/Makefile b/kernel/sched/Makefile
index 3ede7d9..de9b4ff 100644
--- a/kernel/sched/Makefile
+++ b/kernel/sched/Makefile
@@ -11,7 +11,7 @@ ifneq ($(CONFIG_SCHED_OMIT_FRAME_POINTER),y)
 CFLAGS_core.o := $(PROFILING) -fno-omit-frame-pointer
 endif
 
-obj-y += core.o clock.o idle_task.o fair.o rt.o stop_task.o sched_avg.o
+obj-y += core.o clock.o idle_task.o fair.o rt.o stop_task.o sched_avg.o setlimit.o
 obj-$(CONFIG_SMP) += cpupri.o
 obj-$(CONFIG_SCHED_AUTOGROUP) += auto_group.o
 obj-$(CONFIG_SCHEDSTATS) += stats.o
diff --git a/kernel/sched/setlimit.c b/kernel/sched/setlimit.c
new file mode 100644
index 0000000..8165a0b
--- /dev/null
+++ b/kernel/sched/setlimit.c
@@ -0,0 +1,11 @@
+#include <linux/syscalls.h>
+#include <linux/sched.h>
+
+asmlinkage int sys_sched_setlimit(pid_t pid, int limit) {
+	int i;
+	for(i = 0; i < 10; i ++) {
+		printk(KERN_INFO "sys_sched_setlimit: pid[%d] limit[%d]", (int) pid, limit);
+	}
+
+	return 0;
+}
